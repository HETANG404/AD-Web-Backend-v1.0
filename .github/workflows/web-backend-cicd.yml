name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'



      - name: Run Tests and Generate Coverage Report
        run: mvn clean test verify

      - name: Upload JaCoCo Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

      - name: Upload Jacoco exec file
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-exec
          path: target/jacoco.exec
#          。



#      # SAST配置：SpotBugs + Find Security Bugs
      - name: Run SpotBugs Analysis
#        run: mvn spotbugs:check || true
        run: mvn clean install spotbugs:spotbugs verify

      - name: Upload SpotBugs Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: target/spotbugsXml.xml

      - name: Check for SpotBugs Issues
        run: |
          if [ ! -f target/spotbugsXml.xml ]; then
            echo "⚠️ SpotBugs report not found, skipping check."
            exit 0
          fi
          # 输出所有 BugInstance
          ERROR_COUNT=$(grep -o '<BugInstance' target/spotbugsXml.xml | wc -l)
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ Found $ERROR_COUNT issues in SpotBugs report:"
            grep '<BugInstance' target/spotbugsXml.xml | while read -r line; do
              echo "$line"
            done
            exit 1
          else
            echo "✅ No issues found by SpotBugs."
          fi



#       缓存 NVD 数据库
      - name: Cache OWASP Dependency-Check Data
        uses: actions/cache@v3
        with:
          path: ~/.dependency-check
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/dependency-check.properties') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-

  #       SAST配置：依赖检查
      - name: Run Dependency Check
        run: |
          mkdir -p reports
          mvn org.owasp:dependency-check-maven:check -Dformat=ALL -Dout=reports/

      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.xml

      - name: Fail on High Vulnerabilities
        run: |
          if grep -q '<severity>Critical</severity>\|<severity>High</severity>' reports/dependency-check-report.xml; then
            echo "High or Critical vulnerabilities found!"
            exit 1
          fi






      # 先进行 Maven 构建
      - name: Build with Maven
        run: mvn clean verify -DskipTests

      # 登录 Docker 并推送镜像
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/web-backend:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/web-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: 47.130.87.217
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker stop web-backend || true
            docker rm web-backend || true
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/web-backend || true
            #docker pull web-backend:latest
            docker run -d --name web-backend -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/web-backend:latest
            # docker run -d --name web-backend -p 5000:5000 --restart always web-backend:latest
            # docker start web-backend


##DAST
  dast_scan:
    needs: deploy  # 等待 EC2 部署完成
    runs-on: ubuntu-latest
    steps:
      - name: Run OWASP ZAP DAST Scan
        run: |
          docker run -t owasp/zap2docker-stable zap-api-scan.py \
          -t http://47.130.87.217:5000/v3/api-docs \
          -f openapi -r zap_report.html || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html