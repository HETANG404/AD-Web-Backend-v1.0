name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 先进行 Maven 构建
      - name: Build with Maven
        run: mvn clean verify -DskipTests

      # SAST配置：SpotBugs + Find Security Bugs
      - name: Run SpotBugs Analysis
        run: mvn spotbugs:check || true

      - name: Upload SpotBugs Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: target/spotbugs.xml

      - name: Fail on SpotBugs High Priority Issues
        run: |
          if grep -q '<BugInstance.*priority="1"' target/spotbugs.xml; then
            echo "High priority issues found by SpotBugs!"
            exit 1
          fi

##             **缓存 NVD 数据库**
#      - name: Cache OWASP Dependency-Check Data
#        uses: actions/cache@v3
#        with:
#          path: ~/.dependency-check
#          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/dependency-check.properties') }}
#          restore-keys: |
#            dependency-check-${{ runner.os }}-
#
#          # **SAST配置：依赖检查**
#      - name: Run Dependency Check
#        run: |
#          mkdir -p reports
#          mvn org.owasp:dependency-check-maven:check -Dformat=ALL -Dout=reports/
#
#      - name: Upload Dependency Check Report
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: dependency-check-report
#          path: reports/dependency-check-report.xml
#
#      - name: Fail on High Vulnerabilities
#        run: |
#          if grep -q '<severity>Critical</severity>\|<severity>High</severity>' reports/dependency-check-report.xml; then
#            echo "High or Critical vulnerabilities found!"
#            exit 1
#          fi

    

      # 登录 Docker 并推送镜像
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/web-backend:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/web-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
#        d
        with:
          host: 47.130.87.217
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker stop web-backend || true
            docker rm web-backend || true
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/web-backend || true
            sleep 10
            docker pull ${{ secrets.DOCKER_USERNAME }}/web-backend:latest
            docker run -d --name web-backend -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/web-backend:latest
            docker start ${{ secrets.DOCKER_USERNAME }}/web-backend:latest
